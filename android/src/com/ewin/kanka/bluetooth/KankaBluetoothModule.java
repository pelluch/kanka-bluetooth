/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.ewin.kanka.bluetooth;

import java.util.HashMap;
import java.util.Iterator;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.content.Intent;
import com.idevicesinc.device.iDevice;
import com.idevicesinc.device.iDeviceManager;
import com.idevicesinc.device.iDeviceManager.Listener;
import com.idevicesinc.device.iDeviceManagerConfig;
import com.idevicesinc.device.iGrill;
import com.idevicesinc.device.metadata.Kanka;
import com.idevicesinc.sweetblue.BleManager;

@Kroll.module(name = "KankaBluetooth", id = "com.ewin.kanka.bluetooth")
public class KankaBluetoothModule extends KrollModule implements TiActivityResultHandler {

	public static final String LCAT = "TiAPI";
	private iDeviceManager deviceManager;
	public static BleManager bleManager;
	private int requestCode;
	private HashMap<String, KankaDevice> devices = new HashMap<String, KankaDevice>();

	


	public KankaBluetoothModule() {
		super();
	}

	

	@Override
	public void onDestroy(Activity activity) {
		Log.d(LCAT, "Module on destroy");
		// TODO Auto-generated method stub
		super.onDestroy(activity);

		/* Iterator<Entry<String, iDevice>> it = devices.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, iDevice> pair = (Map.Entry<String, iDevice>) it.next();
			pair.getValue().disconnect();
		}
		*/
		// bleManager.stopScan();
		// bleManager.disconnectAll();
		// bleManager.undiscoverAll();
		// bleManager.reset();

	}

	@Override
	public void onResume(Activity activity) {
		super.onResume(activity);
		if(bleManager != null) { bleManager.onResume(); }		
	}

	@Override
	public void onStart(Activity activity) {
		super.onStart(activity);
	}

	@Override
	public void onPause(Activity activity) {
		super.onPause(activity);
		
		if(bleManager != null) { bleManager.onPause(); }
		 
	}

	@Override
	public void onStop(Activity activity) {
		super.onStop(activity);
		Log.d(LCAT, "module onStop");
	}

	@Kroll.method
	public void disconnectDevice(String uniqueId) {

		KankaDevice device = devices.get(uniqueId);
		if (device != null) {
			device.disconnect();
		}
	}

	



	@Kroll.method
	public void acknowledgeAlarm(final String uniqueId) {
		KankaDevice device = devices.get(uniqueId);
		if (device != null) 
		{
			device.acknowledgeAlarm();
		}

		Utils.stopRingtone();
		
	}

	@Kroll.method
	public void connectDevice(final String uniqueId, KrollDict params) {
		Log.d(LCAT, "Connecting device");
		final KankaDevice device = devices.get(uniqueId);
		if (device != null) 
		{
			Log.d(LCAT, "Device exists");
			device.connect(params);
		}
		else
		{
			Log.e(LCAT, "Device does not exist");
		}

	}
	
	@Kroll.method
	public void setRecipe(final String uniqueId, KrollDict params)
	{
		KankaDevice device = devices.get(uniqueId);
		if(device != null) 
		{
			device.setRecipe(params);			
		}
	}
	
	@Kroll.method
	public KrollDict getDevice(String uniqueId)
	{
		KankaDevice device = devices.get(uniqueId);
		if(device != null)
		{
			KrollDict dict = new KrollDict(device.getAttributes());
			return dict;
		}
		return null;
	}
	
	@Kroll.method
	public void startScan(KrollDict params) {

		final KrollFunction onDiscover = (KrollFunction) params.get("onDiscover");
		final KrollFunction onUndiscover = (KrollFunction) params.get("onUndiscover");

		TiApplication appContext = TiApplication.getInstance();
		Activity activity = appContext.getCurrentActivity();
		TiActivitySupport support = (TiActivitySupport) activity;

		iDeviceManagerConfig deviceManagerConfig = new iDeviceManagerConfig(new Kanka());

		deviceManager = iDeviceManager.get(activity, deviceManagerConfig);

		deviceManager.setListener(new Listener() {
			@Override
			public void onDeviceDiscovered(iDevice device) {
				Log.d(LCAT, "Device Discovered: " + device.getDeviceName());
				iGrill igrill = (iGrill) device;
				Log.d(LCAT, "Current low threshold is " + igrill.getProbe(0).getLowThreshold());
				Log.d(LCAT, "Current high threshold is " + igrill.getProbe(0).getHighThreshold());
				Log.d(LCAT, "Current delta is " + igrill.getProbe(0).getPreAlarmDelta());
				// updateDiscoveredDevicesList();
				KankaDevice kankaDevice = new KankaDevice((iGrill)device, krollObject);
				devices.put(device.getUniqueId(), kankaDevice);
				onDiscover.callAsync(krollObject, kankaDevice.getAttributes());
			}

			@Override
			public void onDeviceUndiscovered(iDevice device) {
				Log.d(LCAT, "Device Undiscovered: " + device.getDeviceName());
				KankaDevice kankaDevice = devices.get(device.getUniqueId());
				if(kankaDevice != null)
				{
					onUndiscover.callAsync(krollObject, kankaDevice.getAttributes());
				}
			}
		});

		// Create a BLE manager
		bleManager = BleManager.get(appContext, deviceManagerConfig.newDefaultBleConfig());

		BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		if (bluetoothAdapter != null && !bluetoothAdapter.isEnabled()) {
			Log.d(LCAT, "Turning on");
			Intent bluetoothIntent = new Intent(activity, BluetoothActivity.class);

			Log.d(LCAT, "Created intent");
			// activity.startActivity(bluetoothIntent);
			requestCode = support.getUniqueResultCode();
			bluetoothIntent.putExtra("CODE", requestCode);
			support.launchActivityForResult(bluetoothIntent, requestCode, this);
			Log.d(LCAT, "Launched activity for result with code " + requestCode);

		} else {
			Log.d(LCAT, "Scanning");
			// Start scanning for devices

			bleManager.startScan(deviceManager);			

		}
		
		Iterator<iDevice> it = deviceManager.getDevices();
		while(it.hasNext()) {
			iDevice device = it.next();
			Log.d(LCAT, "Found " + device.getDeviceName());
			iGrill grill = (iGrill)device;
			KankaDevice kankaDevice = new KankaDevice(grill, krollObject);
			devices.put(device.getUniqueId(), kankaDevice);	
			onDiscover.callAsync(getKrollObject(), kankaDevice.getAttributes());
					
		}
		
	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		// TODO Auto-generated method stub
		Log.d(LCAT, "Got an error");
	}

	@Override
	public void onResult(Activity activity, int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		Log.d(LCAT, "Am in onResult");
		Log.d(LCAT, "Result code is " + requestCode);
		Log.d(LCAT, "Resquest code is " + resultCode);
		if (requestCode == this.requestCode && resultCode == Activity.RESULT_OK) {
			// Start scanning for devices
			bleManager.startScan();

		}
	}
}
